assuming we copy everything that's needed and leave hardware space untouched, we end up with 58KB of RAM available.

every level loads its own script (script prg) at $0400-$1FFF, giving 7KB of coding for each level.
for the core placed at $2000-$3FFF, we can use lots of space here for code.
load the player sprite data, UI charset, weapon sprite data now by linking them in the compiled file.
when loading a level, we must load the script and the level separately, since they go into two totally different places in memory.

for the vic (bank1) buffers we need:
(loaded in core,prg)
2KB for UI charset.
2KB for player sprite data (32 frames cleverly split in half with 63 Bytes register-sized sprites and 1 byte for colours, using a split and flip engine).
4KB for weapon sprite data (3 frames for 10 weapons 64 Bytes, and 3 frames of 10 projectiles, using a rotation engine, shared between all enemies). 

1KB for front buffer.
1KB for back buffer.

(loaded by level prg)
2KB for level charset.
4KB for level sprites.

which consumes all 16KB of that space.

for every level stored at $8000-$BFFF
2KB for quiet music data.
2KB for dynamic music data.
2KB for sound data.
X amount of tiles, up to 256 3x3 tiles with 9 bytes for char select, 9 bytes for colour select, 1 byte for collision shape and 1 byte for collision response, totalling to up to 5,120 Bytes.
X amount of screens, up to 60 (6x10 screens) 11x6 tiles (39x18 chars), with 1 byte to select, totalling up to 4 KB.
This consumes up to 15,224 Bytes.
note that the tiles' 2 bytes for collision need to be in a separate hex on the map file for the C64Studio map tool.

this leaves us with the $C000-$CFFF area clear for variables, and $E000-$FFFF for kernel.

Whilst the player waits for each level to load, as we will be no fastloader support, the player can do quick time learning events in the training void similar to sonic frontiers.  This training void will only have solid white blocks for tiles, solid green ones for fake crystals, solid red ones for targets.
the game also needs 4 disks, which is 5 levels per disk (120KB), but temple levels are cloned on each one meaning only 16 level slots are open (since the game has actually 15 levels, this makes the last disk only 96KB in size...secretly though I'll put the debug map on it, so that will make it 120KB).  a third disk should be used for save files.  the boot disk is also larger, since it contains the engine, the tutorial level, and the void, with 40KB, making that disk up to 160KB, just beneath the limit for a standard formatted disk.

